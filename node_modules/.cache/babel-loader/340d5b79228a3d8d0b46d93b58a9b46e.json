{"ast":null,"code":"import TickersService from '../../services/tickers-service';\nimport { TICKER_RETRIEVED, TICKER_ERROR_FETCHING, TICKER_FETCHING_STARTED } from './actionTypes';\n\nconst tickerFetchingStarted = () => ({\n  type: TICKER_FETCHING_STARTED\n});\n\nconst tickerFetched = data => ({\n  type: TICKER_RETRIEVED,\n  payload: data\n});\n\nconst tickerFetchingErrored = () => ({\n  type: TICKER_ERROR_FETCHING\n});\n\nconst tickerRetrieved = id => async dispatch => {\n  dispatch(tickerFetchingStarted());\n\n  try {\n    const res = await TickersService.get(id);\n    dispatch(tickerFetched(res.data));\n    return Promise.resolve(res.data);\n  } catch (error) {\n    dispatch(tickerFetchingErrored());\n    return Promise.resolve(error);\n  }\n};\n\nexport default tickerRetrieved;","map":{"version":3,"sources":["F:/Work/rafpepa/microverse/module 3/crypto-tickers/src/redux/ticker/actions.js"],"names":["TickersService","TICKER_RETRIEVED","TICKER_ERROR_FETCHING","TICKER_FETCHING_STARTED","tickerFetchingStarted","type","tickerFetched","data","payload","tickerFetchingErrored","tickerRetrieved","id","dispatch","res","get","Promise","resolve","error"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,gCAA3B;AACA,SACEC,gBADF,EAEEC,qBAFF,EAGEC,uBAHF,QAIO,eAJP;;AAMA,MAAMC,qBAAqB,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEF;AAAR,CAAP,CAA9B;;AAEA,MAAMG,aAAa,GAAIC,IAAD,KAAW;AAAEF,EAAAA,IAAI,EAAEJ,gBAAR;AAA0BO,EAAAA,OAAO,EAAED;AAAnC,CAAX,CAAtB;;AAEA,MAAME,qBAAqB,GAAG,OAAO;AAAEJ,EAAAA,IAAI,EAAEH;AAAR,CAAP,CAA9B;;AAEA,MAAMQ,eAAe,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AAClDA,EAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;;AACA,MAAI;AACF,UAAMS,GAAG,GAAG,MAAMb,cAAc,CAACc,GAAf,CAAmBH,EAAnB,CAAlB;AAEAC,IAAAA,QAAQ,CAACN,aAAa,CAACO,GAAG,CAACN,IAAL,CAAd,CAAR;AACA,WAAOQ,OAAO,CAACC,OAAR,CAAgBH,GAAG,CAACN,IAApB,CAAP;AACD,GALD,CAKE,OAAOU,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAACH,qBAAqB,EAAtB,CAAR;AACA,WAAOM,OAAO,CAACC,OAAR,CAAgBC,KAAhB,CAAP;AACD;AACF,CAXD;;AAaA,eAAeP,eAAf","sourcesContent":["import TickersService from '../../services/tickers-service';\nimport {\n  TICKER_RETRIEVED,\n  TICKER_ERROR_FETCHING,\n  TICKER_FETCHING_STARTED,\n} from './actionTypes';\n\nconst tickerFetchingStarted = () => ({ type: TICKER_FETCHING_STARTED });\n\nconst tickerFetched = (data) => ({ type: TICKER_RETRIEVED, payload: data });\n\nconst tickerFetchingErrored = () => ({ type: TICKER_ERROR_FETCHING });\n\nconst tickerRetrieved = (id) => async (dispatch) => {\n  dispatch(tickerFetchingStarted());\n  try {\n    const res = await TickersService.get(id);\n\n    dispatch(tickerFetched(res.data));\n    return Promise.resolve(res.data);\n  } catch (error) {\n    dispatch(tickerFetchingErrored());\n    return Promise.resolve(error);\n  }\n};\n\nexport default tickerRetrieved;\n"]},"metadata":{},"sourceType":"module"}