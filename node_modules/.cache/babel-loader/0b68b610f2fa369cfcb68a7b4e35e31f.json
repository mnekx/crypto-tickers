{"ast":null,"code":"import { TICKER_ERROR_FETCHING, TICKER_FETCHING_STARTED, TICKER_RETRIEVED } from './actionTypes';\nconst defautState = {\n  data: null,\n  error: false,\n  loading: false\n};\n\nconst selectedTicker = function () {\n  let prevState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defautState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TICKER_FETCHING_STARTED:\n      return { ...prevState,\n        loading: true\n      };\n\n    case TICKER_RETRIEVED:\n      return {\n        data: action.payload,\n        loading: false,\n        error: false\n      };\n\n    case TICKER_ERROR_FETCHING:\n      return { ...prevState,\n        error: true\n      };\n\n    default:\n      return prevState;\n  }\n};\n\nexport default selectedTicker;","map":{"version":3,"sources":["F:/Work/rafpepa/microverse/module 3/crypto-tickers/src/redux/ticker/reducers.js"],"names":["TICKER_ERROR_FETCHING","TICKER_FETCHING_STARTED","TICKER_RETRIEVED","defautState","data","error","loading","selectedTicker","prevState","action","type","payload"],"mappings":"AAAA,SACEA,qBADF,EAEEC,uBAFF,EAGEC,gBAHF,QAIO,eAJP;AAMA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,KAAK,EAAE,KAArB;AAA4BC,EAAAA,OAAO,EAAE;AAArC,CAApB;;AAEA,MAAMC,cAAc,GAAG,YAAqC;AAAA,MAApCC,SAAoC,uEAAxBL,WAAwB;AAAA,MAAXM,MAAW;;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,uBAAL;AACE,aAAO,EAAE,GAAGO,SAAL;AAAgBF,QAAAA,OAAO,EAAE;AAAzB,OAAP;;AACF,SAAKJ,gBAAL;AACE,aAAO;AAAEE,QAAAA,IAAI,EAAEK,MAAM,CAACE,OAAf;AAAwBL,QAAAA,OAAO,EAAE,KAAjC;AAAwCD,QAAAA,KAAK,EAAE;AAA/C,OAAP;;AACF,SAAKL,qBAAL;AACE,aAAO,EAAE,GAAGQ,SAAL;AAAgBH,QAAAA,KAAK,EAAE;AAAvB,OAAP;;AACF;AACE,aAAOG,SAAP;AARJ;AAUD,CAXD;;AAYA,eAAeD,cAAf","sourcesContent":["import {\n  TICKER_ERROR_FETCHING,\n  TICKER_FETCHING_STARTED,\n  TICKER_RETRIEVED,\n} from './actionTypes';\n\nconst defautState = { data: null, error: false, loading: false };\n\nconst selectedTicker = (prevState = defautState, action) => {\n  switch (action.type) {\n    case TICKER_FETCHING_STARTED:\n      return { ...prevState, loading: true };\n    case TICKER_RETRIEVED:\n      return { data: action.payload, loading: false, error: false };\n    case TICKER_ERROR_FETCHING:\n      return { ...prevState, error: true };\n    default:\n      return prevState;\n  }\n};\nexport default selectedTicker;\n"]},"metadata":{},"sourceType":"module"}