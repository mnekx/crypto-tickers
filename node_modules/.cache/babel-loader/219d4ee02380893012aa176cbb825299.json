{"ast":null,"code":"import { FETCHING_STARTED, TICKERS_FETCHED, ERROR_FETCHING, TICKER_SEARCHED, STARTED_SEARCHING } from './actionTypes';\nconst defaultState = {\n  list: [],\n  loading: false,\n  error: false,\n  searching: false\n};\n\nconst tickers = function () {\n  let prevState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const re = new RegExp(`${action.name}`, 'img');\n\n  switch (action.type) {\n    case FETCHING_STARTED:\n      return { ...prevState,\n        loading: true\n      };\n\n    case TICKERS_FETCHED:\n      return {\n        list: action.payload,\n        loading: false,\n        error: false\n      };\n\n    case ERROR_FETCHING:\n      return { ...prevState,\n        error: true,\n        loading: false\n      };\n\n    case TICKER_SEARCHED:\n      return { ...prevState,\n        searching: false,\n        list: prevState.list.filter(ticker => ticker.name.match(re) !== null)\n      };\n\n    case STARTED_SEARCHING:\n      return { ...prevState,\n        searching: true\n      };\n\n    default:\n      return prevState;\n  }\n};\n\nexport default tickers;","map":{"version":3,"sources":["F:/Work/rafpepa/microverse/module 3/crypto-tickers/src/redux/tickers/reducers.js"],"names":["FETCHING_STARTED","TICKERS_FETCHED","ERROR_FETCHING","TICKER_SEARCHED","STARTED_SEARCHING","defaultState","list","loading","error","searching","tickers","prevState","action","re","RegExp","name","type","payload","filter","ticker","match"],"mappings":"AAAA,SACEA,gBADF,EAEEC,eAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,iBALF,QAMO,eANP;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE,KAHY;AAInBC,EAAAA,SAAS,EAAE;AAJQ,CAArB;;AAOA,MAAMC,OAAO,GAAG,YAAsC;AAAA,MAArCC,SAAqC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;AACpD,QAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAY,GAAEF,MAAM,CAACG,IAAK,EAA1B,EAA6B,KAA7B,CAAX;;AACA,UAAQH,MAAM,CAACI,IAAf;AACE,SAAKhB,gBAAL;AACE,aAAO,EAAE,GAAGW,SAAL;AAAgBJ,QAAAA,OAAO,EAAE;AAAzB,OAAP;;AACF,SAAKN,eAAL;AACE,aAAO;AAAEK,QAAAA,IAAI,EAAEM,MAAM,CAACK,OAAf;AAAwBV,QAAAA,OAAO,EAAE,KAAjC;AAAwCC,QAAAA,KAAK,EAAE;AAA/C,OAAP;;AACF,SAAKN,cAAL;AACE,aAAO,EAAE,GAAGS,SAAL;AAAgBH,QAAAA,KAAK,EAAE,IAAvB;AAA6BD,QAAAA,OAAO,EAAE;AAAtC,OAAP;;AACF,SAAKJ,eAAL;AACE,aAAO,EACL,GAAGQ,SADE;AAELF,QAAAA,SAAS,EAAE,KAFN;AAGLH,QAAAA,IAAI,EAAEK,SAAS,CAACL,IAAV,CAAeY,MAAf,CAAuBC,MAAD,IAAYA,MAAM,CAACJ,IAAP,CAAYK,KAAZ,CAAkBP,EAAlB,MAA0B,IAA5D;AAHD,OAAP;;AAKF,SAAKT,iBAAL;AACE,aAAO,EAAE,GAAGO,SAAL;AAAgBF,QAAAA,SAAS,EAAE;AAA3B,OAAP;;AAEF;AACE,aAAOE,SAAP;AAjBJ;AAmBD,CArBD;;AAuBA,eAAeD,OAAf","sourcesContent":["import {\n  FETCHING_STARTED,\n  TICKERS_FETCHED,\n  ERROR_FETCHING,\n  TICKER_SEARCHED,\n  STARTED_SEARCHING,\n} from './actionTypes';\n\nconst defaultState = {\n  list: [],\n  loading: false,\n  error: false,\n  searching: false,\n};\n\nconst tickers = (prevState = defaultState, action) => {\n  const re = new RegExp(`${action.name}`, 'img');\n  switch (action.type) {\n    case FETCHING_STARTED:\n      return { ...prevState, loading: true };\n    case TICKERS_FETCHED:\n      return { list: action.payload, loading: false, error: false };\n    case ERROR_FETCHING:\n      return { ...prevState, error: true, loading: false };\n    case TICKER_SEARCHED:\n      return {\n        ...prevState,\n        searching: false,\n        list: prevState.list.filter((ticker) => ticker.name.match(re) !== null),\n      };\n    case STARTED_SEARCHING:\n      return { ...prevState, searching: true };\n\n    default:\n      return prevState;\n  }\n};\n\nexport default tickers;\n"]},"metadata":{},"sourceType":"module"}